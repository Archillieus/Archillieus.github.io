<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Archillieus</title>
    <link>https://archillieus.github.io/blog/</link>
    <description>Recent content in Blog on Archillieus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 13 Sep 2018 22:31:21 +0800</lastBuildDate><atom:link href="https://archillieus.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>开心</title>
      <link>https://archillieus.github.io/blog/2021-05/%E5%BC%80%E5%BF%83/</link>
      <pubDate>Mon, 10 May 2021 20:14:59 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2021-05/%E5%BC%80%E5%BF%83/</guid>
      <description>&lt;h2 id=&#34;拷贝控制&#34;&gt;拷贝控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;析构函数&lt;/li&gt;
&lt;li&gt;拷贝构造函数&lt;/li&gt;
&lt;li&gt;拷贝赋值函数&lt;/li&gt;
&lt;li&gt;移动构造函数&lt;/li&gt;
&lt;li&gt;移动赋值函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在定义c++类时，拷贝控制部分是必须，如果用户没有给出自定义的实现，那么编辑器会生成默认的版本，问题是这些默认的行为很可能不是我们想要的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开发工具Gflags,Glog,Protobuf</title>
      <link>https://archillieus.github.io/blog/2019-06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7gflagsglogprotobuf/</link>
      <pubDate>Thu, 13 Jun 2019 21:16:00 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7gflagsglogprotobuf/</guid>
      <description>&lt;p&gt;GFlags是Google开源的一个命令行flag（区别于参数）库。简单来说就是在使用命令行时，可以根据名称设置参数。Google Glog是Google的一个开源库，用于实现应用级别的日志，相比较log4系列的日志系统，它更加轻巧灵活，而且功能也比较完善。Google Protocol Buffer(简称 Protobuf)是Google公司内部的混合语言数据标准。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>互联网广告_概述</title>
      <link>https://archillieus.github.io/blog/2019-06/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%BF%E5%91%8A_%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 11 Jun 2019 20:50:00 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-06/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%BF%E5%91%8A_%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h1 id=&#34;互联网广告平台概述&#34;&gt;互联网广告平台概述&lt;/h1&gt;
&lt;p&gt;日常常见广告形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电视广告：广告片，标板，赞助，冠名，电视信息片，贴片，走马字幕等&lt;/li&gt;
&lt;li&gt;网络广告&lt;/li&gt;
&lt;li&gt;广播广告&lt;/li&gt;
&lt;li&gt;报纸杂志&lt;/li&gt;
&lt;li&gt;户外广告&lt;/li&gt;
&lt;li&gt;交通广告&lt;/li&gt;
&lt;li&gt;电影广告&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;常见问题</title>
      <link>https://archillieus.github.io/blog/2019-05/c-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 07 May 2019 09:43:48 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-05/c-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;本篇记录本人学习C++过程中遇到的一些值得认真思考的语言问题，包含了effective C++中的常见问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; primer》选读</title>
      <link>https://archillieus.github.io/blog/2019-04/c-primer%E9%80%89%E8%AF%BB/</link>
      <pubDate>Wed, 17 Apr 2019 09:43:48 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-04/c-primer%E9%80%89%E8%AF%BB/</guid>
      <description>&lt;p&gt;《C++primer》作为C++入门的一本推荐书籍，对于掌握C++的基本语法和特性还是很有帮助的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;实现一个string类</title>
      <link>https://archillieus.github.io/blog/2019-04/c-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstring%E7%B1%BB/</link>
      <pubDate>Sun, 14 Apr 2019 09:43:48 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-04/c-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstring%E7%B1%BB/</guid>
      <description>&lt;p&gt;尝试自己动手实现一个string类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;进程</title>
      <link>https://archillieus.github.io/blog/2019-04/c-%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Wed, 10 Apr 2019 09:43:48 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-04/c-%E8%BF%9B%E7%A8%8B/</guid>
      <description>&lt;p&gt;引语：C++11的一个重要特性就是对多线程的支持。这意味着使用C++编写与平台无关的多线程程序成为可能，也为可移植性提供了强有力的保证。与此同时，程序员们为提高应用的性能，对并发的关注也是与日俱增，特别在多线程编程方面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;函数指针</title>
      <link>https://archillieus.github.io/blog/2019-04/c-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Apr 2019 21:00:00 +0000</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-04/c-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</guid>
      <description>&lt;p&gt;函数指针：指向函数的指针，首先它是指针变量(同指向一个整形变量、字符、数组一样)，其次它指向一个函数（地址）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;多态</title>
      <link>https://archillieus.github.io/blog/2019-03/c-%E5%A4%9A%E6%80%81/</link>
      <pubDate>Fri, 29 Mar 2019 21:00:00 +0000</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-03/c-%E5%A4%9A%E6%80%81/</guid>
      <description>&lt;h3 id=&#34;多态&#34;&gt;多态&lt;/h3&gt;
&lt;p&gt;多态，即多种状态（形态）。简单来说，我们可以将多态定义为消息以多种形式显示的能力。多态是以封装和继承为基础的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;智能指针</title>
      <link>https://archillieus.github.io/blog/2019-03/c-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Wed, 27 Mar 2019 20:14:59 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-03/c-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;h3 id=&#34;为什么使用智能指针&#34;&gt;为什么使用智能指针？&lt;/h3&gt;
&lt;p&gt;为了解决c++内存泄露的问题，c++11引入智能指针。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;内存配置</title>
      <link>https://archillieus.github.io/blog/2019-03/c-%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 25 Mar 2019 20:14:59 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-03/c-%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE/</guid>
      <description>c语言内存操作 malloc：申请指定字节数的内存。申请到的内存中的初始值不确定，一般使用memset初始化。 realloc：更改以前分配的内存长度（增加或减少）。当增加长度时，可能需将以前分配区的内容移到另一个足够大的区域，而新增区域内的初始值则不确定。 calloc：为指定长度的对象，分配能容纳其指定个数的内存。申请到的内存的每一位（bit）都初始化为 0。 memcpy：函数memcpy从src的位</description>
    </item>
    
    <item>
      <title>C&#43;&#43;内存管理</title>
      <link>https://archillieus.github.io/blog/2019-03/c-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 24 Mar 2019 20:14:59 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-03/c-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>c++内存管理 参考： 深入理解Linux内存管理 内存模型 段页式 buddy,slab 内存池 堆栈 堆栈的区别 管理方式不同；栈申请和释放由编译器管理，而堆的管理由程序员控制，所有容易产生内存泄露 空间大小不同；栈一般很小，可以设置1M左右，堆内存基本没有限制。 能否产生碎片不同；栈不会产生内存碎片，而堆内存由于频繁的new/delete会产生内存碎片。 生长方向不同；栈从上往下高地址向低地址生产，堆由低地址向高地址生长 分配方式不同</description>
    </item>
    
    <item>
      <title>C&#43;&#43;拷贝控制</title>
      <link>https://archillieus.github.io/blog/2019-03/c-%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 23 Mar 2019 20:14:59 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-03/c-%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;拷贝控制&#34;&gt;拷贝控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;析构函数&lt;/li&gt;
&lt;li&gt;拷贝构造函数&lt;/li&gt;
&lt;li&gt;拷贝赋值函数&lt;/li&gt;
&lt;li&gt;移动构造函数&lt;/li&gt;
&lt;li&gt;移动赋值函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在定义c++类时，拷贝控制部分是必须，如果用户没有给出自定义的实现，那么编辑器会生成默认的版本，问题是这些默认的行为很可能不是我们想要的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;重载</title>
      <link>https://archillieus.github.io/blog/2019-03/c-%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Fri, 22 Mar 2019 20:14:59 +0800</pubDate>
      
      <guid>https://archillieus.github.io/blog/2019-03/c-%E9%87%8D%E8%BD%BD/</guid>
      <description>&lt;h1 id=&#34;重载&#34;&gt;重载&lt;/h1&gt;
&lt;p&gt;C语言不支持重载，但重载是C++的重要特性之一。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
